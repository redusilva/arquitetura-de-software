version: '3.8'

services:
  postgres-login-service:
    image: postgres:16
    container_name: postgres-login-service
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-login-data:/var/lib/postgresql/data
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  postgres-main-backend:
    image: postgres:16
    container_name: postgres-main-backend
    ports:
      - "${POSTGRES_MAIN_BACKEND_DATABASE_PORT}:${POSTGRES_MAIN_BACKEND_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_MAIN_BACKEND_USER}
      POSTGRES_PASSWORD: ${POSTGRES_MAIN_BACKEND_PASSWORD}
      POSTGRES_DB: ${POSTGRES_MAIN_BACKEND_NAME}
    volumes:
      - postgres-main-backend-data:/var/lib/postgresql/data
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_MAIN_BACKEND_USER} -d ${POSTGRES_MAIN_BACKEND_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  login-service:
    build:
      context: ./loginService
      dockerfile: Dockerfile
    container_name: login-service
    ports:
      - "${LOGIN_SERVICE_PORT}:${SERVER_PORT}"
    depends_on:
      postgres-login-service:
        condition: service_healthy
    env_file:
      - .env
    restart: "no"
    working_dir: /app
    command: ["npm", "start"]

  main-backend:
    build:
      context: ./main_backend
      dockerfile: Dockerfile
    container_name: main-backend
    ports:
      - "${EXPOSE_MAIN_BACKEND_SERVICE_PORT}:${MAIN_BACKEND_SERVICE_PORT}"
    depends_on:
      postgres-main-backend:
        condition: service_healthy
      logs:
        condition: service_started
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_MAIN_BACKEND_USER}:${POSTGRES_MAIN_BACKEND_PASSWORD}@postgres-main-backend:${POSTGRES_MAIN_BACKEND_PORT}/${POSTGRES_MAIN_BACKEND_NAME}"
      SERVER_PORT: ${EXPOSE_MAIN_BACKEND_SERVICE_PORT}
      AUTH_SERVICE_URL: http://login-service:4000
    restart: "no"
    working_dir: /app
    command: sh -c "npx prisma db push && npm start"

  # servico-email:
  #   build:
  #     context: ./mailService
  #     dockerfile: Dockerfile
  #   image: my-python-app:latest
  #   container_name: servico-email
  #   ports:
  #     - "4002:4002"
  #   environment:
  #     FLASK_APP: app.py
  #     FLASK_RUN_HOST: localhost
  #     PYTHONUNBUFFERED: '1'
  #   restart: "no"
  #   depends_on:
  #     postgres-login-service:
  #       condition: service_healthy

  mongo:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  logs:
    build:
      context: ./logsService
      dockerfile: Dockerfile
    container_name: logs_service
    ports:
      - "4001:4001"
    depends_on:
      - mongo
    environment:
      - MONGO_URL=mongodb://mongo:27017/logs
    working_dir: /app
    command: sh -c "npm run create-seed && npm start"

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flutter_web
    restart: "no"
    ports:
      - "6660:80"
    volumes:
      - ./frontend/web:/usr/share/nginx/html:ro


volumes:
  postgres-login-data:
  postgres-main-backend-data:
  mongo_data:
